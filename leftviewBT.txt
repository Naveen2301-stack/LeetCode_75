Problem statement
You have been given a binary tree of integers. 
You are supposed to find the left view of the binary tree. 
The left view of a binary tree is the set of all nodes that are visible when the binary tree is viewed from the left side.

***************************************************************************

import java.util.* ;
import java.io.*; 
/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T> 
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data) 
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

public class Solution 
{
    public static ArrayList<Integer> getLeftView(TreeNode<Integer> root) 
    {
        //    Write your code here.
        TreeNode<Integer> current = root;
        ArrayList<Integer> leftview = new ArrayList<>();
        Queue<TreeNode<Integer>> q = new LinkedList<>();
        q.add(current);
        if(root==null)
        {
            return leftview;
        }
        while(!q.isEmpty())
        {
            int n = q.size();
            for(int i=0;i<n;i++)
            {
                TreeNode<Integer> first = q.peek();
                q.remove();
                if(i==0)
                {
                    leftview.add(first.data);
                }
                if(first.left!=null)
                {
                    q.add(first.left);
                }
                if(first.right!=null)
                {
                    q.add(first.right);
                }
            }
        }
        return leftview;
    }
}



Time Complexity: O(N)

Space Complexity: O(H)       (H -> Height of the Tree)