Given a number N. Find the minimum number of operations required to reach N starting from 0. You have 2 operations available:

Double the number
Add one to the number
Example 1:

Input:
N = 8
Output: 4
Explanation: 
0 + 1 = 1 --> 1 + 1 = 2 --> 2 * 2 = 4 --> 4 * 2 = 8.

Input: 
N = 7
Output: 5
Explanation: 
0 + 1 = 1 --> 1 + 1 = 2 --> 1 + 2 = 3 --> 3 * 2 = 6 --> 6 + 1 = 7.


****************************************************************************


class Solution
{
    public int minOperation(int n)
    {
               int[] dp = new int[n + 1];
        dp[0] = 0; // Base case: 0 operations required to reach 0.
        
        for (int i = 1; i <= n; i++) {
            if (i % 2 == 0) {
                // If i is even, we can reach it from i/2 by doubling.
                dp[i] = dp[i / 2] + 1; // 1 operation to double.
            } else {
                // If i is odd, we can reach it from (i-1) by adding 1.
                dp[i] = dp[i - 1] + 1; // 1 operation to add 1.
            }
        }
        
        return dp[n];
    }
} TC 0(n) sc : O(n)