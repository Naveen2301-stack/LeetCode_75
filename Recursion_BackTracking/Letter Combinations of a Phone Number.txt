17. Letter Combinations of a Phone Number  // Leetcode
****************pls refer qno to see pictue clearly**************************
Medium
Topics
Companies
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

*******************************************************************************************************

class Solution {
    public void allCombinationsHelper(HashMap<Character,String> hm,StringBuilder sb,List<String> res,int index,String digits,int n)
    {
        if(digits.isEmpty())
        {
            return;
        }
        if(index==digits.length())
        {
            res.add(sb.toString());
            return;
        }
        char current_digit = digits.charAt(index);
        String current_string = hm.get(current_digit);

        if(current_string!=null)
        {
            for(int i=0;i<current_string.length();i++)
            {
                char current_letter = current_string.charAt(i);
                sb.append(current_letter);
                allCombinationsHelper(hm,sb,res,index+1,digits,n);
                sb.deleteCharAt(sb.length()-1);
            }
        }
    }
    public List<String> letterCombinations(String digits) {
        int n = digits.length();

        HashMap<Character,String> hm = new HashMap<>();  // i am trying to put all possible combinations
        hm.put('2',"abc");
        hm.put('3',"def");
        hm.put('4',"ghi");
        hm.put('5',"jkl");
        hm.put('6',"mno");
        hm.put('7',"pqrs");
        hm.put('8',"tuv");
        hm.put('9',"wxyz");

        List<String> res = new ArrayList<>();
        StringBuilder sb = new StringBuilder();

        allCombinationsHelper(hm,sb,res,0,digits,n);
        return res;

    }
}  // space complexity is O(3^N * 4^M), and the time complexity is O(3^N * 4^M), 