Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

****************************************************************************************************

class Solution {
    void possiblePermutations(int nums[], List<List<Integer>> ans, List<Integer> temp, int visited[]) {
        if(nums.length == temp.size()) {
            ans.add(new ArrayList <>(temp));
            return;
        }                                                      
        for(int i = 0; i < visited.length; i++) { 
            if(visited[i] == 0) {
                visited[i] = 1;
                temp.add(nums[i]);
                possiblePermutations(nums, ans, temp, visited);
                visited[i] = 0;
                temp.remove(temp.size()-1); 
            }
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        int visited[] = new int [nums.length];
        Arrays.fill(visited, 0);
        possiblePermutations(nums, ans, temp, visited);
        return ans;
    }
}